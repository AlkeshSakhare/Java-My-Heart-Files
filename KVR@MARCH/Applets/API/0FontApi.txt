Compiled from "Font.java"
public class java.awt.Font extends  Object implements java.io.Serializable{
    public static final  String DIALOG;
    public static final  String DIALOG_INPUT;
    public static final  String SANS_SERIF;
    public static final  String SERIF;
    public static final  String MONOSPACED;
    public static final int PLAIN;
    public static final int BOLD;
    public static final int ITALIC;
    public static final int ROMAN_BASELINE;
    public static final int CENTER_BASELINE;
    public static final int HANGING_BASELINE;
    public static final int TRUETYPE_FONT;
    public static final int TYPE1_FONT;
    protected  String name;
    protected int style;
    protected int size;
    protected float pointSize;
    transient int hash;
    public static final int LAYOUT_LEFT_TO_RIGHT;
    public static final int LAYOUT_RIGHT_TO_LEFT;
    public static final int LAYOUT_NO_START_CONTEXT;
    public static final int LAYOUT_NO_LIMIT_CONTEXT;
    public java.awt.peer.FontPeer getPeer();
    final java.awt.peer.FontPeer getPeer_NoClientCode();
    public java.awt.Font( String, int, int);
    public java.awt.Font(java.util.Map);
    protected java.awt.Font(java.awt.Font);
    public static java.awt.Font getFont(java.util.Map);
    public static java.awt.Font createFont(int, java.io.InputStream)       throws java.awt.FontFormatException, java.io.IOException;
    public static java.awt.Font createFont(int, java.io.File)       throws java.awt.FontFormatException, java.io.IOException;
    public java.awt.geom.AffineTransform getTransform();
    public  String getFamily();
    final  String getFamily_NoClientCode();
    public  String getFamily(java.util.Locale);
    public  String getPSName();
    public  String getName();
    public  String getFontName();
    public  String getFontName(java.util.Locale);
    public int getStyle();
    public int getSize();
    public float getSize2D();
    public boolean isPlain();
    public boolean isBold();
    public boolean isItalic();
    public boolean isTransformed();
    public boolean hasLayoutAttributes();
    public static java.awt.Font getFont( String);
    public static java.awt.Font decode( String);
    public static java.awt.Font getFont( String, java.awt.Font);
    public int hashCode();
    public boolean equals( Object);
    public  String toString();
    public int getNumGlyphs();
    public int getMissingGlyphCode();
    public byte getBaselineFor(char);
    public java.util.Map getAttributes();
    public java.text.AttributedCharacterIterator$Attribute[] getAvailableAttributes();
    public java.awt.Font deriveFont(int, float);
    public java.awt.Font deriveFont(int, java.awt.geom.AffineTransform);
    public java.awt.Font deriveFont(float);
    public java.awt.Font deriveFont(java.awt.geom.AffineTransform);
    public java.awt.Font deriveFont(int);
    public java.awt.Font deriveFont(java.util.Map);
    public boolean canDisplay(char);
    public boolean canDisplay(int);
    public int canDisplayUpTo( String);
    public int canDisplayUpTo(char[], int, int);
    public int canDisplayUpTo(java.text.CharacterIterator, int, int);
    public float getItalicAngle();
    public boolean hasUniformLineMetrics();
    public java.awt.font.LineMetrics getLineMetrics( String, java.awt.font.FontRenderContext);
    public java.awt.font.LineMetrics getLineMetrics( String, int, int, java.awt.font.FontRenderContext);
    public java.awt.font.LineMetrics getLineMetrics(char[], int, int, java.awt.font.FontRenderContext);
    public java.awt.font.LineMetrics getLineMetrics(java.text.CharacterIterator, int, int, java.awt.font.FontRenderContext);
    public java.awt.geom.Rectangle2D getStringBounds( String, java.awt.font.FontRenderContext);
    public java.awt.geom.Rectangle2D getStringBounds( String, int, int, java.awt.font.FontRenderContext);
    public java.awt.geom.Rectangle2D getStringBounds(char[], int, int, java.awt.font.FontRenderContext);
    public java.awt.geom.Rectangle2D getStringBounds(java.text.CharacterIterator, int, int, java.awt.font.FontRenderContext);
    public java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext);
    public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,  String);
    public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, char[]);
    public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.text.CharacterIterator);
    public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, int[]);
    public java.awt.font.GlyphVector layoutGlyphVector(java.awt.font.FontRenderContext, char[], int, int, int);
    protected void finalize()       throws  Throwable;
    static {};
}

