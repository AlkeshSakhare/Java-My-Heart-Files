Compiled from "Thread.java"
public class   Thread extends   Object implements   Runnable
{
      ThreadLocal$ThreadLocalMap threadLocals;
      ThreadLocal$ThreadLocalMap inheritableThreadLocals;
    volatile   Object parkBlocker;
 
    public static final int MIN_PRIORITY;
    public static final int NORM_PRIORITY;
    public static final int MAX_PRIORITY;


    void blockedOn(sun.nio.ch.Interruptible);
    
    public static native   Thread currentThread();
    public static native void yield();
    public static native void sleep(long)       throws   InterruptedException;
    public static void sleep(long, int)       throws   InterruptedException;
    public   Thread();
    public   Thread(  String);
    public   Thread(  Runnable);
    public   Thread(  Runnable,   String);    
    public   Thread(  ThreadGroup,   String);
         public   Thread(  ThreadGroup,   Runnable);
    public   Thread(  ThreadGroup,   Runnable,   String);
    public   Thread(  ThreadGroup,   Runnable,   String, long);

    public synchronized void start();
    public void run();
    public final void stop();
    public final synchronized void stop(  Throwable);


    public void interrupt();
    public static boolean interrupted();
    public boolean isInterrupted();
    public void destroy();
    public final native boolean isAlive();
    public final void suspend();
    public final void resume();
    public final void setPriority(int);
    public final int getPriority();
    public final void setName(  String);
    public final   String getName();
    public final   ThreadGroup getThreadGroup();
    public static int activeCount();
    public static int enumerate(  Thread[]);
    public native int countStackFrames();
    public final synchronized void join(long)       throws   InterruptedException;
    public final synchronized void join(long, int)       throws   InterruptedException;
    public final void join()       throws   InterruptedException;
    public static void dumpStack();
    public final void setDaemon(boolean);
    public final boolean isDaemon();
    public final void checkAccess();
    public   String toString();
    public   ClassLoader getContextClassLoader();
    public void setContextClassLoader(  ClassLoader);
    public static native boolean holdsLock(  Object);
    public   StackTraceElement[] getStackTrace();
    public static java.util.Map getAllStackTraces();
    public long getId();
    public   Thread$State getState();
    public static void setDefaultUncaughtExceptionHandler(  Thread$UncaughtExceptionHandler);
    public static   Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
    public   Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
    public void setUncaughtExceptionHandler(  Thread$UncaughtExceptionHandler);
    static {};
}

