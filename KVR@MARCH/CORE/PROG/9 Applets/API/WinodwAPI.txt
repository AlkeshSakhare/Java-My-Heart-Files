Compiled from "Window.java"
public class Window extends Container implements javax.accessibility.Accessible{
    String warningString;
    transient java.util.List icons;
    static boolean systemSyncLWRequests;
    boolean syncLWRequests;
    transient boolean beforeFirstShow;
    static final int OPENED;
    int state;
    static java.util.Vector allWindows;
    transient java.util.Vector ownedWindowList;
    transient boolean showWithParent;
    transient Dialog modalBlocker;
    Dialog$ModalExclusionType modalExclusionType;
    transient event.WindowListener windowListener;
    transient event.WindowStateListener windowStateListener;
    transient event.WindowFocusListener windowFocusListener;
    transient im.InputContext inputContext;
    transient boolean isInShow;
    transient boolean isTrayIconWindow;
    transient Object anchor;
    Window(GraphicsConfiguration);
    Window()       throws HeadlessException;
    public Window(Frame);
    public Window(Window);
    public Window(Window, GraphicsConfiguration);
    String constructComponentName();
    public java.util.List getIconImages();
    public synchronized void setIconImages(java.util.List);
    public void setIconImage(Image);
    public void addNotify();
    public void removeNotify();
    public void pack();
    public void setMinimumSize(Dimension);
    public void setSize(Dimension);
    public void setSize(int, int);
    public void reshape(int, int, int, int);
    void setClientSize(int, int);
    public void setVisible(boolean);
    public void show();
    static void updateChildFocusableWindowState(Window);
    synchronized void postWindowEvent(int);
    public void hide();
    final void clearMostRecentFocusOwnerOnHide();
    public void dispose();
    void disposeImpl();
    void doDispose();
    void adjustListeningChildrenOnParent(long, int);
    void adjustDecendantsOnParent(int);
    public void toFront();
    final void toFront_NoClientCode();
    public void toBack();
    final void toBack_NoClientCode();
    public Toolkit getToolkit();
    public final String getWarningString();
    public java.util.Locale getLocale();
    public im.InputContext getInputContext();
    public void setCursor(Cursor);
    public Window getOwner();
    public Window[] getOwnedWindows();
    boolean isModalBlocked();
    void setModalBlocked(Dialog, boolean);
    Dialog getModalBlocker();
    static java.util.Vector getAllWindows();
    static java.util.Vector getAllUnblockedWindows();
    public static Window[] getWindows();
    public static Window[] getOwnerlessWindows();
    Window getDocumentRoot();
    public void setModalExclusionType(Dialog$ModalExclusionType);
    public Dialog$ModalExclusionType getModalExclusionType();
    boolean isModalExcluded(Dialog$ModalExclusionType);
    void updateChildrenBlocking();
    public synchronized void addWindowListener(event.WindowListener);
    public synchronized void addWindowStateListener(event.WindowStateListener);
    public synchronized void addWindowFocusListener(event.WindowFocusListener);
    public synchronized void removeWindowListener(event.WindowListener);
    public synchronized void removeWindowStateListener(event.WindowStateListener);
    public synchronized void removeWindowFocusListener(event.WindowFocusListener);
    public synchronized event.WindowListener[] getWindowListeners();
    public synchronized event.WindowFocusListener[] getWindowFocusListeners();
    public synchronized event.WindowStateListener[] getWindowStateListeners();
    public java.util.EventListener[] getListeners(Class);
    boolean eventEnabled(AWTEvent);
    protected void processEvent(AWTEvent);
    protected void processWindowEvent(event.WindowEvent);
    protected void processWindowFocusEvent(event.WindowEvent);
    protected void processWindowStateEvent(event.WindowEvent);
    void preProcessKeyEvent(event.KeyEvent);
    void postProcessKeyEvent(event.KeyEvent);
    public final void setAlwaysOnTop(boolean)       throws SecurityException;
    public boolean isAlwaysOnTopSupported();
    public final boolean isAlwaysOnTop();
    public Component getFocusOwner();
    public Component getMostRecentFocusOwner();
    public boolean isActive();
    public boolean isFocused();
    public java.util.Set getFocusTraversalKeys(int);
    public final void setFocusCycleRoot(boolean);
    public final boolean isFocusCycleRoot();
    public final Container getFocusCycleRootAncestor();
    public final boolean isFocusableWindow();
    public boolean getFocusableWindowState();
    public void setFocusableWindowState(boolean);
    public void addPropertyChangeListener(java.beans.PropertyChangeListener);
    public void addPropertyChangeListener(String, java.beans.PropertyChangeListener);
    void dispatchEventImpl(AWTEvent);
    public boolean postEvent(Event);
    public boolean isShowing();
    public void applyResourceBundle(java.util.ResourceBundle);
    public void applyResourceBundle(String);
    void addOwnedWindow(ref.WeakReference);
    void removeOwnedWindow(ref.WeakReference);
    void connectOwnedWindow(Window);
    public javax.accessibility.AccessibleContext getAccessibleContext();
    public GraphicsConfiguration getGraphicsConfiguration();
    void resetGC();
    public void setLocationRelativeTo(Component);
    void deliverMouseWheelToAncestor(event.MouseWheelEvent);
    boolean dispatchMouseWheelToAncestor(event.MouseWheelEvent);
    public void createBufferStrategy(int);
    public void createBufferStrategy(int, BufferCapabilities)       throws AWTException;
    public image.BufferStrategy getBufferStrategy();
    Component getTemporaryLostComponent();
    Component setTemporaryLostComponent(Component);
    boolean canContainFocusOwner(Component);
    public void setLocationByPlatform(boolean);
    public boolean isLocationByPlatform();
    public void setBounds(int, int, int, int);
    public void setBounds(Rectangle);
    boolean isRecursivelyVisible();
    static ref.WeakReference access$000(Window);
    static void access$100(sun.awt.AppContext, ref.WeakReference);
    static Object access$200(Window);
    static {};
}

